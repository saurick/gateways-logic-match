// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: match.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchClient is the client API for Match service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchClient interface {
	Match(ctx context.Context, in *C2SMatch, opts ...grpc.CallOption) (Match_MatchClient, error)
	CancelMatch(ctx context.Context, in *C2SCancelMatch, opts ...grpc.CallOption) (*S2CCancelMatch, error)
}

type matchClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchClient(cc grpc.ClientConnInterface) MatchClient {
	return &matchClient{cc}
}

func (c *matchClient) Match(ctx context.Context, in *C2SMatch, opts ...grpc.CallOption) (Match_MatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Match_ServiceDesc.Streams[0], "/match.Match/Match", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchMatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Match_MatchClient interface {
	Recv() (*S2CMatch, error)
	grpc.ClientStream
}

type matchMatchClient struct {
	grpc.ClientStream
}

func (x *matchMatchClient) Recv() (*S2CMatch, error) {
	m := new(S2CMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *matchClient) CancelMatch(ctx context.Context, in *C2SCancelMatch, opts ...grpc.CallOption) (*S2CCancelMatch, error) {
	out := new(S2CCancelMatch)
	err := c.cc.Invoke(ctx, "/match.Match/CancelMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServer is the server API for Match service.
// All implementations must embed UnimplementedMatchServer
// for forward compatibility
type MatchServer interface {
	Match(*C2SMatch, Match_MatchServer) error
	CancelMatch(context.Context, *C2SCancelMatch) (*S2CCancelMatch, error)
	mustEmbedUnimplementedMatchServer()
}

// UnimplementedMatchServer must be embedded to have forward compatible implementations.
type UnimplementedMatchServer struct {
}

func (UnimplementedMatchServer) Match(*C2SMatch, Match_MatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedMatchServer) CancelMatch(context.Context, *C2SCancelMatch) (*S2CCancelMatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMatch not implemented")
}
func (UnimplementedMatchServer) mustEmbedUnimplementedMatchServer() {}

// UnsafeMatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServer will
// result in compilation errors.
type UnsafeMatchServer interface {
	mustEmbedUnimplementedMatchServer()
}

func RegisterMatchServer(s grpc.ServiceRegistrar, srv MatchServer) {
	s.RegisterService(&Match_ServiceDesc, srv)
}

func _Match_Match_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(C2SMatch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchServer).Match(m, &matchMatchServer{stream})
}

type Match_MatchServer interface {
	Send(*S2CMatch) error
	grpc.ServerStream
}

type matchMatchServer struct {
	grpc.ServerStream
}

func (x *matchMatchServer) Send(m *S2CMatch) error {
	return x.ServerStream.SendMsg(m)
}

func _Match_CancelMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SCancelMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).CancelMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.Match/CancelMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).CancelMatch(ctx, req.(*C2SCancelMatch))
	}
	return interceptor(ctx, in, info, handler)
}

// Match_ServiceDesc is the grpc.ServiceDesc for Match service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Match_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "match.Match",
	HandlerType: (*MatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelMatch",
			Handler:    _Match_CancelMatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Match",
			Handler:       _Match_Match_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "match.proto",
}
